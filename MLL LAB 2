import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
------------------------------------------------------------------------------------
X = pd.read_csv('diabetes(1).csv')
print("Column names in the dataset:", X.columns)
print("Original Data (first 5 rows):\n", X.head()) 
Output:
Column names in the dataset: Index(['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
       'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome'],
      dtype='object')
Original Data (first 5 rows):
    Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \
0            6      148             72             35        0  33.6   
1            1       85             66             29        0  26.6   
2            8      183             64              0        0  23.3   
3            1       89             66             23       94  28.1   
4            0      137             40             35      168  43.1   

   DiabetesPedigreeFunction  Age  Outcome  
0                     0.627   50        1  
1                     0.351   31        0  
2                     0.672   32        1  
3                     0.167   21        0  
4                     2.288   33        1  
------------------------------------------------------------------------------------
mean_X = X.mean(axis=0) 
X_centered = X - mean_X 
cov_matrix = np.cov(X_centered, rowvar=False)
print("Mean-Centered Data:\n", X_centered)
print("\nCovariance Matrix:\n", cov_matrix)
Output:
Mean-Centered Data:
      Pregnancies    Glucose  BloodPressure  SkinThickness     Insulin  \
0       2.154948  27.105469       2.894531      14.463542  -79.799479   
1      -2.845052 -35.894531      -3.105469       8.463542  -79.799479   
2       4.154948  62.105469      -5.105469     -20.536458  -79.799479   
3      -2.845052 -31.894531      -3.105469       2.463542   14.200521   
4      -3.845052  16.105469     -29.105469      14.463542   88.200521   
..           ...        ...            ...            ...         ...   
763     6.154948 -19.894531       6.894531      27.463542  100.200521   
764    -1.845052   1.105469       0.894531       6.463542  -79.799479   
765     1.154948   0.105469       2.894531       2.463542   32.200521   
766    -2.845052   5.105469      -9.105469     -20.536458  -79.799479   
767    -2.845052 -27.894531       0.894531      10.463542  -79.799479   

           BMI  DiabetesPedigreeFunction        Age   Outcome  
0     1.607422                  0.155124  16.759115  0.651042  
1    -5.392578                 -0.120876  -2.240885 -0.348958  
2    -8.692578                  0.200124  -1.240885  0.651042  
3    -3.892578                 -0.304876 -12.240885 -0.348958  
4    11.107422                  1.816124  -0.240885  0.651042  
..         ...                       ...        ...       ...  
763   0.907422                 -0.300876  29.759115 -0.348958  
764   4.807422                 -0.131876  -6.240885 -0.348958  
765  -5.792578                 -0.226876  -3.240885 -0.348958  
766  -1.892578                 -0.122876  13.759115  0.651042  
767  -1.592578                 -0.156876 -10.240885 -0.348958  

[768 rows x 9 columns]

Covariance Matrix:
 [[ 1.13540563e+01  1.39471307e+01  9.21453818e+00 -4.39004101e+00
  -2.85552307e+01  4.69774181e-01 -3.74259714e-02  2.15706198e+01
   3.56618047e-01]
 [ 1.39471307e+01  1.02224831e+03  9.44309556e+01  2.92391827e+01
   1.22093580e+03  5.57269867e+01  1.45487481e+00  9.90828054e+01
   7.11507904e+00]
 [ 9.21453818e+00  9.44309556e+01  3.74647271e+02  6.40293962e+01
   1.98378412e+02  4.30046951e+01  2.64637574e-01  5.45234528e+01
   6.00696708e-01]
 [-4.39004101e+00  2.92391827e+01  6.40293962e+01  2.54473245e+02
   8.02979941e+02  4.93738694e+01  9.72135546e-01 -2.13810232e+01
   5.68747284e-01]
 [-2.85552307e+01  1.22093580e+03  1.98378412e+02  8.02979941e+02
   1.32811801e+04  1.79775172e+02  7.06668051e+00 -5.71432903e+01
   7.17567090e+00]
 [ 4.69774181e-01  5.57269867e+01  4.30046951e+01  4.93738694e+01
   1.79775172e+02  6.21599840e+01  3.67404687e-01  3.36032992e+00
   1.10063763e+00]
 [-3.74259714e-02  1.45487481e+00  2.64637574e-01  9.72135546e-01
   7.06668051e+00  3.67404687e-01  1.09778638e-01  1.30771687e-01
   2.74721656e-02]
 [ 2.15706198e+01  9.90828054e+01  5.45234528e+01 -2.13810232e+01
  -5.71432903e+01  3.36032992e+00  1.30771687e-01  1.38303046e+02
   1.33695268e+00]
 [ 3.56618047e-01  7.11507904e+00  6.00696708e-01  5.68747284e-01
   7.17567090e+00  1.10063763e+00  2.74721656e-02  1.33695268e+00
   2.27482616e-01]]
---------------------------------------------------------------------------

eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)
print("\nEigenvalues (Variance Explained):\n", eigenvalues_sorted)
Output:
Eigenvalues (Variance Explained):
 [1.34565776e+04 9.32805966e+02 3.90577869e+02 1.98184055e+02
 1.12693345e+02 4.58373834e+01 7.76354758e+00 1.64360830e-01
 9.91386710e-02]
-------------------------------------------------------------------------
k = 2
eigenvectors_selected = eigenvectors_sorted[:, :k]
print("\nEigenvectors (Principal Components):\n", eigenvectors_selected)
Output:
Eigenvectors (Principal Components):
 [[-2.02174881e-03 -2.26500774e-02]
 [ 9.78118564e-02 -9.72185778e-01]
 [ 1.60930708e-02 -1.41901298e-01]
 [ 6.07566786e-02  5.78559304e-02]
 [ 9.93110644e-01  9.46290072e-02]
 [ 1.40108503e-02 -4.69772538e-02]
 [ 5.37168857e-04 -8.16920737e-04]
 [-3.56468123e-03 -1.40168383e-01]
 [ 5.85325534e-04 -7.01033714e-03]]

----------------------------------------------------------------------------

X_pca = np.dot(X_centered, eigenvectors_selected)
print("\nPCA Reduced Data (first 5 rows):\n", X_pca[:5]) 
Output:
PCA Reduced Data (first 5 rows):
 [[-75.71424916 -35.95494354]
 [-82.35846646  28.90955895]
 [-74.63022933 -67.90963328]
 [ 11.07720564  34.90017519]
 [ 89.74415566  -2.75126306]]

-------------------------------------------------------------------------------

fig = plt.figure(figsize=(10, 6))
ax1 = fig.add_subplot(121)
ax1.scatter(X.iloc[:, 0], X.iloc[:, 1], color='blue')
ax1.set_title('Original Data (2D)')
ax1.set_xlabel('Feature 1')
ax1.set_ylabel('Feature 2')

# Plot the reduced 2D data
ax2 = fig.add_subplot(122)
ax2.scatter(X_pca[:, 0], X_pca[:, 1], color='red')
ax2.set_title('PCA Reduced Data (2D)')
ax2.set_xlabel('Principal Component 1')
ax2.set_ylabel('Principal Component 2')

plt.show()

output:
Images....
